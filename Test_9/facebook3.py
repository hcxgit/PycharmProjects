#coding:utf-8
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import scipy.cluster.hierarchy as sch
from collections import defaultdict
import sys
import seaborn
sys.setrecursionlimit(100000)

# s_matix = [[0 for i in range(6)] for i in range(7)]
# for i in range(5):
# 	s_matix[0][i]=i
# 	s_matix[i][0]=i
# s_matix = np.array(s_matix)
# print(s_matix)
# print(s_matix.shape[0])

# b = [[('1', '2'), ('2', '3'), ('3', '4')], [('5', '6'), ('6', '8')]]
# b = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
# 	 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
# 	 0.008174386920980926, 0.008174386920980926, 0.008174386920980926, 0.008174386920980926, 0.008174386920980926,
# 	 0.008174386920980926, 0.008174386920980926, 0.008174386920980926, 0.008174386920980926, 0.008174386920980926, 0.008174386920980926,
# 	 0.008174386920980926, 0.01634877384196185, 0.013623978201634877, 0.01634877384196185, 0.01634877384196185, 0.01634877384196185,
# 	 0.01634877384196185, 0.01634877384196185, 0.01634877384196185, 0.01634877384196185, 0.01634877384196185, 0.01634877384196185,
# 	 0.013623978201634877, 0.013623978201634877, 0.013623978201634877, 0.013623978201634877, 0.01634877384196185, 0.013623978201634877,
# 	 0.01634877384196185, 0.01634877384196185, 0.013623978201634877, 0.013623978201634877, 0.013623978201634877, 0.013623978201634877,
# 	 0.008174386920980926, 0.008174386920980926, 0.01634877384196185, 0.01634877384196185, 0.01634877384196185, 0.013623978201634877,
# 	 0.013623978201634877, 0.013623978201634877, 0.013623978201634877, 0.013623978201634877, 0.01634877384196185, 0.01634877384196185,
# 	 0.01634877384196185, 0.01634877384196185, 0.01634877384196185, 0.01634877384196185, 0.01634877384196185, 0.013623978201634877,
# 	 0.013623978201634877, 0.013623978201634877, 0.008174386920980926, 0.008174386920980926, 0.01634877384196185, 0.013623978201634877,
# 	 0.013623978201634877, 0.021798365122615803, 0.021798365122615803, 0.02452316076294278, 0.02452316076294278, 0.02452316076294278,
# 	 0.0326975476839237, 0.035422343324250684, 0.04087193460490463, 0.04087193460490463, 0.0326975476839237, 0.04087193460490463,
# 	 0.04087193460490463, 0.04087193460490463, 0.0326975476839237, 0.0326975476839237, 0.04087193460490463, 0.035422343324250684,
# 	 0.04087193460490463, 0.027247956403269755, 0.027247956403269755, 0.04087193460490463, 0.04087193460490463, 0.0326975476839237,
# 	 0.0326975476839237, 0.0326975476839237, 0.0326975476839237, 0.0326975476839237, 0.0326975476839237, 0.0326975476839237,
# 	 0.0326975476839237, 0.0326975476839237, 0.0326975476839237, 0.0326975476839237, 0.027247956403269755, 0.027247956403269755,
# 	 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463,
# 	 0.04087193460490463, 0.035422343324250684, 0.03814713896457766, 0.03814713896457766, 0.04087193460490463, 0.04087193460490463,
# 	 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463,
# 	 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463,
# 	 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463, 0.04087193460490463,
# 	 0.04087193460490463, 0.035422343324250684, 0.04087193460490463, 0.04087193460490463, 0.04904632152588556, 0.043596730245231606,
# 	 0.043596730245231606, 0.051771117166212535, 0.04904632152588556, 0.04904632152588556, 0.04904632152588556, 0.04904632152588556,
# 	 0.05449591280653951, 0.05722070844686648, 0.05722070844686648, 0.051771117166212535, 0.05994550408719346, 0.05994550408719346,
# 	 0.05994550408719346, 0.05722070844686648, 0.0653950953678474, 0.05994550408719346, 0.0653950953678474, 0.0653950953678474,
# 	 0.05994550408719346, 0.05722070844686648, 0.05994550408719346, 0.05722070844686648, 0.05994550408719346, 0.05722070844686648,
# 	 0.05722070844686648, 0.05994550408719346, 0.0653950953678474, 0.0653950953678474, 0.06267029972752043, 0.0653950953678474,
# 	 0.0653950953678474, 0.0653950953678474, 0.07084468664850137, 0.06267029972752043, 0.0653950953678474, 0.06267029972752043,
# 	 0.0681198910081744, 0.07356948228882834, 0.0653950953678474, 0.0681198910081744, 0.06267029972752043, 0.06267029972752043,
# 	 0.07356948228882834, 0.06267029972752043, 0.07084468664850137, 0.07084468664850137, 0.08174386920980926, 0.0681198910081744,
# 	 0.0681198910081744, 0.0681198910081744, 0.0681198910081744, 0.0681198910081744, 0.08174386920980926, 0.0681198910081744,
# 	 0.08174386920980926, 0.08991825613079019, 0.08174386920980926, 0.07901907356948229, 0.08991825613079019, 0.07629427792915532,
# 	 0.08174386920980926, 0.08174386920980926, 0.08174386920980926, 0.07629427792915532, 0.07629427792915532, 0.07901907356948229,
# 	 0.07629427792915532, 0.07629427792915532, 0.08719346049046321, 0.07629427792915532, 0.08719346049046321, 0.07629427792915532,
# 	 0.07901907356948229, 0.07629427792915532, 0.07629427792915532, 0.08991825613079019, 0.07629427792915532, 0.10354223433242507,
# 	 0.08719346049046321, 0.07901907356948229, 0.08991825613079019, 0.09536784741144415, 0.09809264305177112, 0.09809264305177112,
# 	 0.08719346049046321, 0.08719346049046321, 0.08719346049046321, 0.08719346049046321, 0.08719346049046321, 0.08719346049046321,
# 	 0.09264305177111716, 0.09264305177111716, 0.08719346049046321, 0.08991825613079019, 0.08991825613079019, 0.09536784741144415,
# 	 0.08719346049046321, 0.08174386920980926, 0.09536784741144415, 0.09264305177111716, 0.09264305177111716, 0.09264305177111716,
# 	 0.09264305177111716, 0.09264305177111716, 0.08991825613079019, 0.09264305177111716, 0.09536784741144415, 0.10899182561307902,
# 	 0.09536784741144415, 0.09536784741144415, 0.09536784741144415, 0.09264305177111716, 0.08719346049046321, 0.09536784741144415,
# 	 0.08719346049046321, 0.09809264305177112, 0.09809264305177112, 0.12534059945504086, 0.09536784741144415, 0.09536784741144415,
# 	 0.1008174386920981, 0.09809264305177112, 0.09809264305177112, 0.09809264305177112, 0.1008174386920981, 0.1008174386920981,
# 	 0.09536784741144415, 0.10354223433242507, 0.10354223433242507, 0.10354223433242507, 0.10354223433242507, 0.10626702997275204,
# 	 0.10354223433242507, 0.10626702997275204, 0.10354223433242507, 0.11444141689373297, 0.08991825613079019, 0.08174386920980926,
# 	 0.07423554344535271, 0.07654198662373049, 0.0675509776327215, 0.05890367046000962, 0.05945790907787179, 0.060963717194894594,
# 	 0.06295575450888802, 0.0546251521254483, 0.05536468822809304, 0.05722070844686648, 0.056343495035593126, 0.04979932772848304,
# 	 0.05096377030981935, 0.05099260412611911, 0.04955612200052738, 0.05055228384752865, 0.05160597803649574, 0.054795227479151186,
# 	 0.04835480142019651, 0.05018165304268846, 0.05145116010238626,
# 	 0.05375278672281397, 0.050290502749989335, 0.04245312505745605,
# 	 0.04156974812254935, 0.03159149955930895, 0.03191588913659758, 0.02950472832184645, 0.0313212587487311, 0.03285141849655394,
# 	 0.035693754340973445,
# 	 0.03785221990703638, 0.03965592776620185, 0.0410535876475931, 0.03431532831116098, 0.03502291754823758, 0.03893017167398947,
# 	 0.04200488597177714,
# 	 0.04146643547188506, 0.04502105523903889, 0.04387695726208315,
# 	 0.04487258736901448, 0.049882392660410196, 0.06353853969426869, 0.067751966625102, 0.07597715482073308, 0.06977478101571762,
# 	 0.07585707908065087, 0.08005049338813713, 0.08119295424427868, 0.08723812927145218, 0.10056959900403029, 0.12808812166128805,
# 	 0.13125548726953468]
xlist=[1,2,3,4,5,6]
ylist = [1,2,3,4,5,6]
plt.figure()
ax1 = plt.plot()
plot1,=plt.plot(xlist,ylist)
plt.gca().invert_yaxis()
plt.show()
# ax.invert_yaxis()
# plt.show()
# b=[2,2,2,2,3,3,3,3]
# def	bbb(b):
# 	sum = 0
# 	for i, element in enumerate(b):
# 		sum += element*5
# 	return sum/2
# print(bbb(b))

# b[0] = list(np.unique(b[0]))
# print('去重后:',np.unique(b))
# print(b[0])
# a=[[1,2,2,3],[4,5,5,6],[7,8,8,8]]
# a=np.asarray(a)
# print(a)
# a=np.delete(a, 2,axis=0)
# a=np.delete(a,2,axis=1)
# print(a.shape[0])
# print(a)


# print(type(a))
# a=np.delete(a,1,0)
# a=np.delete(a,1,1)
# print(type(a))
# # 边相似度计算
# def	similarity(i, j, k):
# 	j_neighbors = list(DG.neighbors(j))   # j 的所有邻居
# 	j_neighbors.append(j)           # 包含j
# 	k_neighbors = list(DG.neighbors(k))  # k 的所有邻居
# 	k_neighbors.append(k)
# 	j_and_k = set(j_neighbors)&set(k_neighbors)   # 交集
# 	j_or_k = set(j_neighbors)|set(k_neighbors)    # 并集
# 	S = float(len(j_and_k))/len(j_or_k)
# 	return S
#
# #  相似度矩阵
# def	similarity_matix(edges, longth_edges):
# 	# 相似度矩阵
# 	s_matix = np.zeros((longth_edges, longth_edges))
# 	i = 0
# 	for x in edges:
# 		j = 0
# 		for y in edges:
# 			# 同边
# 			if x == y:
# 				s_matix[i][j] = 1-1
# 			# 有共同点
# 			elif x[0] == y[0]:
# 				s_matix[i][j] = 1-similarity(x[0], x[1], y[1])
# 			elif x[0] == y[1]:
# 				s_matix[i][j] = 1-similarity(x[0], x[1], y[0])
# 			elif x[1] == y[0]:
# 				s_matix[i][j] = 1-similarity(x[1], x[0], y[1])
# 			elif x[1] == y[1]:
# 				s_matix[i][j] = 1-similarity(x[1], x[0], y[0])
# 			# 没有共同点
# 			else:
# 				s_matix[i][j] = 1
# 			j += 1
# 		i += 1
# 	return s_matix
#
#
# #  获取边列表
# fb = nx.read_edgelist("facebook_combined.txt", create_using=nx.Graph())
# # 获取ego节点并画出图
# print ('输入节点的值，并显示节点对应的ego网络图')
# l = input()
# if l in fb.nodes():
# 	node_ego = nx.ego_graph(fb, l)   # ego节点
# 	DG = nx.Graph(node_ego)          # 节点l的ego网络图
# 	pos = nx.spring_layout(DG)
# 	plt.figure()
# 	plt.axis('off')
# 	nx.draw_networkx(DG, pos=pos, with_labels=True)
# 	plt.show()
# 	print(DG.edges())
# 	s_matix = np.array(similarity_matix(DG.edges(), DG.number_of_edges()))
# 	print(s_matix)
#
# 	HC = sch.linkage(s_matix, method='single')  # 进行层次聚类
# 	# HC = sch.complete(s_matix)
# 	print(HC)
# 	plt.figure()
# 	sch.dendrogram(HC, color_threshold=1, truncate_mode='lastp', labels=np.array([a for a in DG.edges()]),
# 				distance_sort='descending')  # 将层级聚类结果以树状图表示出来
# 	plt.show()
# 	cluster = sch.fcluster(HC, t=0.9)  # t取0.75，由HC得到聚类结果:
# 	membership = list(cluster)
# 	partition = defaultdict(list)
# 	for n, p in zip(list(range(DG.number_of_edges())), membership):
# 		partition[p].append(DG.edges()[n])
# 	print(partition)
# 	p = 0
# 	color = []
# 	for c in seaborn.xkcd_rgb.values():  # 含有颜色的字典
# 		color.append(c)
#
# 	for v in partition.values():
# 		for n in v:
# 			nx.draw_networkx_nodes(DG, pos=pos, nodelist=list(n), node_color=color[p])
# 			nx.draw_networkx_labels(DG, pos=pos)
# 		nx.draw_networkx_edges(DG, pos=pos, edgelist=v)
# 		p += 1
# 	plt.show()
# 	print(list(partition.values()))


